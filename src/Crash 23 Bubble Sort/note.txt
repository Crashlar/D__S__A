Checklist 
    Sorting 
    Bubble sort Algorithm 
    Time complexity and Space complexity
    Bubble sort Optimization 
    Stable and Unstable sort 
    Two Questions
    

What is Sorting ? 
arr[4] = {5 , 3, 2 , 6};
    to sort = Put in ascending order 
        sort(v.begin() , v.end())
        reverse(v.begin() , v.end())
    sort in descending order = put the element in descending order 

Bubble sort Algorithm
    arr[] = { 5 , 1 , 4 , 3 , 2};

    check both adjacent element and if first one is greater than swap both and move on linearly 
    
    arr[] = 5 , 1 , 4 , 3 , 2 
        last element on best position to don't move 
        1st pass = 1 , 4, 3, 2 , 5 
        2nd Pass = 1 , 3 , 2 , 4 , 5 
        3rd Pass = 1 , 2 , 3 , 4 , 5 

    Worst case :- 
        arr[] = 5 , 4 , 3 , 2 , 1 
            1st pass = 4 , 3 , 2 , 1 , 5  
            2nd Pass = 3 , 2 , 1 , 4 , 5
            3rd Pass = 2 , 1 , 3 , 4 , 5
            4th Pass = 1 , 2 , 3 , 4 , 5
    
    Observation 
        In each pass the nth max element goes to its right position 
        if there are n elements , then we require atmost(jyada se jyada) 'n-1' passes to sort 
    Algorithm-
        In each pas swap two adjacent elements if arr[i] > arr[i+1]
        Iteration in each pass also reduces 


    Can We optimize it further
        Ques - Given an array , find if it is sorted or not 
        Ans-
            arr[] = {1 , 2, 3,4}
            bool flag = true
            for( int i = 0 ; i < n -1 ; i++){
                if ( arr[i] > arr[i+1]){
                    flag = false;
                    break;
                }
            }
            if( flag) -> sorted 

Stable and Unstable Sort 
    arr[] = {5 , 3, 5, 1, 2}

    After sort =
        stable sort - 1 , 2, 3 , 5 of 1 , 5 of 2
        Unstable sort -1 , 2, 3 , 5 of 2 , 5 of 1
    Conclusion - Bubble sort is a stable sort


